{
    "chain": 4,
    "contracts": [
        {
            "name": "TypeDB",
            "address": "0xCB5881F6d832Bdf05c2FB08255f38acFaC5Fa06D",
            "abi": [{"type":"function","name":"init","constant":false,"payable":false,"inputs":[{"type":"bytes16","name":"name"},{"type":"bytes15","name":"ttype"},{"type":"uint256","name":"rowSize"},{"type":"uint256","name":"fieldsCount"},{"type":"bytes","name":"fields"}],"outputs":[]},{"type":"function","name":"set","constant":false,"payable":false,"inputs":[{"type":"uint256","name":"tableId"},{"type":"uint256","name":"itemIndex"},{"type":"bytes","name":"value"}],"outputs":[]},{"type":"function","name":"get","constant":true,"stateMutability":"view","payable":false,"inputs":[{"type":"uint256","name":"tableId"},{"type":"uint256","name":"itemIndex"}],"outputs":[{"type":"bytes","name":"data"}]},{"type":"function","name":"delete","constant":false,"payable":false,"inputs":[{"type":"uint256","name":"tableId"},{"type":"uint256","name":"key"}],"outputs":[]},{"type":"function","name":"count","constant":true,"stateMutability":"view","payable":false,"inputs":[{"type":"uint256","name":"tableId"}],"outputs":[{"type":"uint256"}]},{"type":"function","name":"setBulk","constant":false,"payable":false,"inputs":[{"type":"uint256","name":"tableId"},{"type":"uint256","name":"itemIndex"},{"type":"uint256","name":"itemCount"},{"type":"bytes","name":"values"}],"outputs":[]},{"type":"function","name":"getBulk","constant":true,"stateMutability":"view","payable":false,"inputs":[{"type":"uint256","name":"tableId"},{"type":"uint256","name":"itemIndex"},{"type":"uint256","name":"itemCount"}],"outputs":[{"type":"bytes","name":"values"}]},{"type":"function","name":"setAll","constant":false,"payable":false,"inputs":[{"type":"uint256","name":"tableId"},{"type":"uint256","name":"itemCount"},{"type":"bytes","name":"values"}],"outputs":[]},{"type":"function","name":"getAll","constant":true,"stateMutability":"view","payable":false,"inputs":[{"type":"uint256","name":"tableId"}],"outputs":[{"type":"bytes","name":"values"}]},{"type":"function","name":"registerTable","constant":false,"payable":false,"inputs":[{"type":"uint256","name":"salt"},{"type":"bytes16","name":"name"},{"type":"bytes15","name":"type"},{"type":"uint8","name":"keyLength"},{"type":"uint256","name":"isSlotMulti"},{"type":"uint256","name":"rowSize"},{"type":"uint256","name":"fieldsCount"},{"type":"bytes","name":"fields"}],"outputs":[]},{"type":"function","name":"getTableInfo","constant":true,"stateMutability":"view","payable":false,"inputs":[{"type":"uint256","name":"tableId"}],"outputs":[{"type":"bytes","name":"tableInfo"}]},{"type":"function","name":"getTableConfig","constant":true,"stateMutability":"view","payable":false,"inputs":[{"type":"uint256","name":"index"}],"outputs":[{"type":"uint256","name":"count"},{"type":"uint256","name":"isMulti"},{"type":"uint256","name":"rowSize"}]},{"type":"function","name":"setTableFields","constant":false,"payable":false,"inputs":[{"type":"uint256","name":"tableId"},{"type":"uint256","name":"fieldsIndex"},{"type":"uint256","name":"fieldsCount"},{"type":"bytes","name":"fields"}],"outputs":[]},{"type":"function","name":"getTableFields","constant":true,"stateMutability":"view","payable":false,"inputs":[{"type":"uint256","name":"tableId"}],"outputs":[{"type":"bytes","name":"fieldsInfo"}]}]
        }
    ],
    "content": "<setDefaultStyle:(set-style \"defaultStyle\" {\n  \".MarkdownPreview\" {\n      \"padding-bottom\" \"20px\"\n  }\n  \".ant-pagination\" {\n    \"position\" \"fixed\"\n    \"bottom\" 0\n    \"right\" 0\n  }\n})>\n\n<funcDefs:(do\n  (def! splitStr (fn* (val len)\n    (if (gt (count (seq val)) len)\n        (concat [(slice val 0 len)] (splitStr (slice val len) len ))\n        [val]\n    )\n  ))\n  (def! splitStrByLengths (fn* (val lengths)\n    (if (gt (count lengths) 0)\n        (concat [(slice val 0 (first lengths))] (splitStrByLengths (slice val (first lengths)) (rest lengths) ))\n        (if (= val \"\") [] [val])\n    )\n  ))\n  (def! strip-zeros-tail (fn* (value lastIndex) (let* ( ;; 454300000 8\n        strip-zeros-tail-internal (fn* (value lastIndex)\n            (if (= (slice value lastIndex) \"0\")\n                (strip-zeros-tail-internal (slice value 0 lastIndex) (- lastIndex 1))\n                value\n            )\n        )\n        strippedValue (strip-zeros-tail-internal value lastIndex)\n    )\n      (if (= (% (count (seq strippedValue)) 2) 0)\n          strippedValue\n          (str strippedValue \"0\")\n      )\n  )))\n  ; (log \"splitStr\" (splitStr \"12345678\" 2))\n  ; (log \"splitStrByLengths\" (splitStrByLengths \"12345678\" [2 3 1 1 1]))\n)>\n\n<getTableData:(do\n(def! displayValue (fn* (value typeName length)\n  (if (= typeName \"bytes\")\n      (if (gt length 6)\n          (str (slice value 0 3) \"..\" (slice value (- (count (seq value)) 4 )))\n          value\n      )\n      (if (= typeName \"string\")\n        (eth-utils-toUtf8String value)\n        (if (= typeName \"uint\")\n            (number value)\n            value\n        )\n      )\n  )\n))\n(def! parseValue (fn* (value typeName)\n    (if (= typeName \"string\")\n      (eth-utils-toUtf8String (strip-zeros-tail value (- (count (seq value)) 1)))\n      (if (= typeName \"uint\")\n          (number value)\n          value\n      )\n    )\n))\n  (def! pad-end (fn* (value padding size) (let* (\n    length (count (seq value))\n    size (if (gt size length) (- size length) length)\n    size (if (= (% size 2) 0) size (+ size 1))\n    pad-end-internal (fn* (value padding size)\n      (if (lt size 1)\n        value\n        (str (pad-end-internal value padding (- size 1)) \"0\")\n      )\n    )\n  )\n      (pad-end-internal value padding size)\n  )))\n  (def! encodeFieldValue (fn* (value typeName size)\n    (if (= typeName \"string\")\n        (str \"0x\" (pad-end\n            (slice (eth-utils-hexlify (eth-utils-toUtf8Bytes value)) 2)\n            \"0\" (* 2 size)))\n        (if (= typeName \"uint\")\n          (str \"0x\" (bn-toString value 16 (* 2 size)))\n          value\n        )\n    )\n  ))\n(def! get-table-data (fn* (rowBytes fields index start stop) (let* (\n    rowsHex (await (react-Contract-call \"TypeDB\" \"getBulk\" index start stop))\n    rowsHex (slice rowsHex 2)\n    fieldLengths (map (fn* (f) (* 2 (get f \"length\"))) fields)\n    fieldNames (map (fn* (f) (get f \"name\")) fields)\n)\n    (map\n      (fn* (row index) (let* (\n             values (splitStrByLengths row fieldLengths)\n          )\n             (assoc (reduce\n                (fn* (accum value index)\n                    (assoc accum\n                      (nth fieldNames index) (str \"0x\" value)\n                      (str (nth fieldNames index) \"_show\") (displayValue (str \"0x\" value) (get (nth fields index) \"type\") (get (nth fields index) \"length\"))\n                      (str (nth fieldNames index) \"_parsed\") (parseValue (str \"0x\" value) (get (nth fields index) \"type\"))\n                    )\n                )\n                values\n                {}\n              )\n               \"key\" (+ index (get-state \"tableStart\"))\n              ;;  \"name_show\" (str (get field \"name\") \": (\" (get field \"type\") \" \" (get field \"length\") \")\")\n             )\n      ))\n      (splitStr rowsHex (* 2 rowBytes))\n    )\n)))\n (def! get-table-columns (fn* (fields)\n     (concat\n       (list {\n           \"title\" \"key\"\n                  \"dataIndex\" \"key\"\n                  \"key\" \"key\"\n                 \"width\" 30\n       })\n       (map\n           (fn* (field) (let* (\n               w (* (get field \"length\") 16)\n               ;;w (if (lt w 20) 80 w)\n           )\n                {\n                  \"title\" (str (get field \"name\") \" (\" (get field \"type\") \" \" (get field \"length\") \")\")\n                   \"dataIndex\" (str (get field \"name\") \"_show\")\n                  \"key\" (str (get field \"name\") \"_show\")\n                  ;;\"width\" w\n                }\n           ))\n           fields\n         )\n      )\n ))\n)>\n\n<getTableMetad:(def! get-table-metadata (fn* (index) (let* (\n     masterTableFields (await (react-Contract-call \"TypeDB\" \"getTableFields\" index))\n    sdfs (log masterTableFields \"masterTableFields\")\n\n  tableConfig (await (react-Contract-call \"TypeDB\" \"getTableConfig\" index))\n   sdfs (log tableConfig \"getTableConfig\")\n\n   tableInfo (await (react-Contract-call \"TypeDB\" \"getTableInfo\" index))\n   sdfs (log tableInfo \"getTableInfo\")\n\n   name (eth-utils-toUtf8String (str \"0x\" (slice tableInfo 66 )))\n   sfds (log \"name\" name)\n\n   fields (map\n       (fn* (val) (let* (\n             values (splitStrByLengths val [32 30 2])\n             name (first values)\n             typeName (nth values 1)\n             name (eth-utils-toUtf8String (str \"0x\" (strip-zeros-tail name (- (count (seq name)) 1)  )))\n             typeName (eth-utils-toUtf8String (str \"0x\"(strip-zeros-tail typeName (- (count (seq typeName)) 1)  )))\n         )\n            {\"name\" name \"type\" typeName \"length\" (number (str \"0x\" (nth values 2)))}\n       ))\n       (splitStr (slice masterTableFields 2) 64)\n    )\n    count (bn-toNumber (first tableConfig))\n    isMulti (bn-toNumber (nth tableConfig 1))\n    rowSize (bn-toNumber (nth tableConfig 2))\n    rowBytes (if (= isMulti 1) (* rowSize 32) rowSize )\n)\n     {\n        \"index\" index\n        \"count\" count\n        \"rowBytes\" rowBytes\n        \"fields\" fields\n        \"name\" name\n        ;; \"saltLength\" saltLength\n        ;; \"salt\" salt\n     }\n)))>\n\n\n<initState:(let* (\n\n)\n  (do\n    (set-state \"tableMap\" {\"master\" 0})\n    (set-state \"selectedTableIndex\" 0)\n    (set-state \"defaultPageSize\" 20)\n    (set-state \"tableStart\" 0)\n    (set-state \"tableEnd\" 20)\n    (set-state \"pageNumber\" 1)\n    (set-state \"showFields\" false)\n    (set-state \"fieldsCount\" 1)\n    (set-state \"fieldsFields\" [\n      {\"name\" \"name\" \"type\" \"string\" \"length\" 16}\n      {\"name\" \"type\" \"type\" \"string\" \"length\" 15}\n      {\"name\" \"length\" \"type\" \"uint\" \"length\" 1}\n    ])\n  )\n  )>\n\n<getTableStateInit:(let* (\n   tableInfo (await (get-table-metadata 0))\n  masterTableData  (await (get-table-data\n         (get tableInfo \"rowBytes\")\n         (get tableInfo \"fields\")\n         0 0 (get-state \"tableEnd\")))\n)\n  (do\n    (set-state \"masterTable\" tableInfo)\n    (set-state \"selectedTableInfo\" tableInfo)\n    (set-state \"tableMap\" {\"master\" 0})\n    (set-state \"masterTableData\" masterTableData)\n  )\n)>\n\n<updateTableState:(watch [\"setReceipt\" \"deleteReceipt\"] (fn* () (let* (\n    selectedTableIndex (get-state \"selectedTableIndex\")\n   tableInfo (await (get-table-metadata selectedTableIndex))\n  sdfsd (log \"tableInfo\" tableInfo selectedTableIndex)\n)\n  (do\n    (set-state \"selectedTableInfo\" tableInfo)\n  )\n)))>\n\n<getTableState:(watch [\"selectedTableIndex\"] (fn* () (let* (\n    selectedTableIndex (get-state \"selectedTableIndex\")\n   tableInfo (await (get-table-metadata selectedTableIndex))\n  sdfsd (log \"tableInfo\" tableInfo selectedTableIndex)\n)\n  (do\n    (set-state \"selectedTableInfo\" tableInfo)\n    (set-state \"tableStart\" 0)\n     (set-state \"tableEnd\" (get-state \"defaultPageSize\"))\n  )\n)))>\n\n\n<showTable:(watch [\"showFields\"] (fn* () (if (get-state \"showFields\")\n  (watch [\"selectedTableInfo\" \"tableStart\" \"setFieldReceipt\"] (fn* () (let* (\n      columns (get-table-columns (get-state \"fieldsFields\") )\n      selectedTableInfo (get-state \"selectedTableInfo\")\n      fields (get selectedTableInfo \"fields\")\n    data (map\n      (fn* (field index)\n          (reduce\n            (fn* (accum key) (assoc accum\n                (str key \"_show\") (get field key)\n                (str key \"_parsed\") (get field key)\n                \"key\" index\n            ))\n            (keys field)\n            field\n          )\n      )\n      fields\n    )\n    ggfd (log \"fields\" columns data)\n    )\n       (react-table {\n            \"key\" 1\n            \"locale\" {\"emptyText\" \"-\"}\n            \"columns\" columns\n            \"data\" data\n            \"size\" \"small\"\n            \"scroll\" {\"y\"  (- (get (window-dimensions) \"height\") 100)}\n            \"rowHeight\" 22\n            \"pagination\" { \"pageSize\" (count data) \"position\" [\"none\" \"none\"] }\n            \"onRow\" (fn* (record rowIndex) {\n                  \"onClick\" (fn* () (do\n                       (set-state \"selectedTableData\" record)\n                       (set-state \"inEditRecordInternalKey\" (+ rowIndex (get-state \"tableStart\")))\n                      (log \"fields\" record rowIndex  (get (get-state \"selectedTableInfo\") \"fields\"))\n                       (set-state \"inEditRecordTable\" (vals (nth\n                            (get (get-state \"selectedTableInfo\") \"fields\")\n                             rowIndex\n                         )))\n                    ))\n              })\n  })\n)))\n(watch [\"selectedTableInfo\" \"tableStart\" \"setReceipt\" \"deleteReceipt\"] (fn* () (let* (\n   selectedTableIndex (get-state \"selectedTableIndex\")\n  selectedTableInfo (get-state \"selectedTableInfo\")\n   data (get-table-data\n         (get selectedTableInfo \"rowBytes\")\n         (get selectedTableInfo \"fields\")\n         selectedTableIndex (get-state \"tableStart\") (get-state \"tableEnd\"))\n   fgdg  (log \"tableData data\" data)\n    columns (get-table-columns (get selectedTableInfo \"fields\") )\n\n sdgds (log \"columns\" columns)\n  dsfsd (set-state \"selectedTableData\" (first data))\n)\n    (react-table {\n            \"key\" 1\n            \"locale\" {\"emptyText\" \"-\"}\n            \"columns\" columns\n            \"data\" data\n            \"size\" \"small\"\n            \"scroll\" {\"y\"  (- (get (window-dimensions) \"height\") 70)}\n            \"rowHeight\" 22\n            \"pagination\" { \"pageSize\" (count data) \"position\" [\"none\" \"none\"] }\n            \"onRow\" (fn* (record rowIndex) {\n                  \"onClick\" (fn* () (do\n                       (set-state \"selectedTableData\" record)\n                       (set-state \"inEditRecordInternalKey\" (+ rowIndex (get-state \"tableStart\")))\n                       (set-state \"inEditRecordTable\" (log (map\n                             (fn* (field accum)\n                                    (get record (str (get field \"name\") \"_parsed\"))\n                             )\n                            (get (get-state \"selectedTableInfo\") \"fields\")\n                             {}\n                        ) \"inEditRecord inEditRecordTable\") )\n                    ))\n              })\n  })\n)) )\n\n  )))>\n\n\n\n<dsfsdfds:(watch [\"inEditRecordTable\"] (fn* () (let* (\n  inEditRecord (get-state \"inEditRecordTable\")\n  inEditRecord (if (nil? inEditRecord) [] inEditRecord)\n  dsfds (log \"----inEditRecord inEditRecordTable\" inEditRecord)\n)\n  (do\n    (set-state \"inEditRecordInternal\" inEditRecord)\n  )\n)))>\n\n<fghjhh:(watch [\"inEditRecordInternalKeyUser\"] (fn* ()\n  (set-state \"inEditRecordInternalKey\" (get-state \"inEditRecordInternalKeyUser\"))\n))>\n\n<encodingRecord:(watch [\"inEditRecordInternal\"] (fn* () (let* (\n  inEditRecordInternal (get-state \"inEditRecordInternal\")\n  fields (if (get-state \"showFields\")\n    (get-state \"fieldsFields\")\n    (get (get-state \"selectedTableInfo\") \"fields\")\n  )\n  sdfs (log \"encodeFieldValue inEditRecordInternal\" inEditRecordInternal)\n\n  encodedRecord (map\n      (fn* (value index)\n          (log (slice (encodeFieldValue\n              value\n              (get (nth fields index) \"type\")\n              (get (nth fields index) \"length\")\n          ) 2) \"encodeFieldValue result\")\n      )\n      inEditRecordInternal\n  )\n  encodedRecord (str \"0x\" (apply str encodedRecord))\n  sdfd (log \"encodeFieldValue encodedRecord\" encodedRecord)\n)\n  (set-state \"encodedRecord\" encodedRecord)\n)))>\n\n<dsfs4534dfds:(watch [\"inEditRecordUser\"] (fn* () (let* (\n  inEditRecordUser (get-state \"inEditRecordUser\")\n  inEditRecordUser (if (nil? inEditRecordUser) [] inEditRecordUser)\n  dsfds (log \"----inEditRecord inEditRecordUse00r\" inEditRecordUser)\n)\n  (set-state \"inEditRecordInternal\" inEditRecordUser)\n)))>\n\n<dsfs4534fdsfdvvvvvdfds:(watch [\"selectedTableIndex\" \"inEditRecordInternalKey\" \"encodedRecord\"] (fn* ()\n  (log \"selectedTableIndex,inEditRecordInternalKey,encodedRecord\"\n    (get-state \"selectedTableIndex\")\n    (get-state \"inEditRecordInternalKey\")\n    (get-state \"encodedRecord\")\n  )\n))>\n\n<selectedTableItems:(react-div {\"style\" {\"bottom\" 2 \"position\" \"absolute\" }} (list\n    (react-div {\"style\" {\"bottom\" 2 \"display\" \"flex\" }} (list\n       (react-div {\"style\" {\"display\" \"flex\"}} (list\n            (watch [\"inEditRecordInternalKey\"] (fn* ()\n              (react-input {\n                \"key\" 3\n                \"style\" {\"marginLeft\" \"5px\" \"width\" 50}\n                \"placeholder\" \"key\"\n                \"value\" (get-state \"inEditRecordInternalKey\")\n                \"onChange\" (fn* (val) (set-state \"inEditRecordInternalKeyUser\" val))\n              } )\n            ))\n        ))\n\n        (watch [\"inEditRecordInternal\" \"selectedTableInfo\" \"showFields\"] (fn* ()\n          (react-div {\"style\" {\"display\" \"flex\"}} (map\n            (fn* (field index) (let* (\n                w (* (get field \"length\") 30)\n                w (if (gt w 200) 200 w)\n              ) (react-div {} (list\n               (react-input {\n                   \"key\" 3\n                   \"style\" {\"marginLeft\" \"5px\" \"width\" w}\n                   \"placeholder\" (str (get field \"name\") \": \" (get field \"type\"))\n                    \"value\" (if (lt index (count (get-state \"inEditRecordInternal\"))) (nth (get-state \"inEditRecordInternal\") index) nil)\n                 \"onChange\" (fn* (value)\n                     (set-state \"inEditRecordUser\"\n                         (log (concat\n                           (slice (get-state \"inEditRecordInternal\") 0 index)\n                           [value]\n                           (slice (get-state \"inEditRecordInternal\") (+ index 1))\n                          ) \"inEditRecord inEditRecordUserrr\" index (get-state \"inEditRecordInternal\"))\n                     )\n                 )\n               })\n            ))))\n            (if (get-state \"showFields\")\n                (get-state \"fieldsFields\")\n                (get  (get-state \"selectedTableInfo\") \"fields\")\n            )\n          ))\n        ))\n\n\n       (watch [\"showFields\"] (fn* () (if (get-state \"showFields\")\n            (react-Contract {\n              \"key\" 32\n              \"name\" \"TypeDB\"\n              \"function\" \"setTableFields\"\n              \"input\" \"selectedTableIndex,inEditRecordInternalKey,fieldsCount,encodedRecord\"\n              \"output\" \"setReceipt\"\n              \"hidden\" \"input,output\"\n            })\n          (react-Contract {\n              \"key\" 33\n              \"name\" \"TypeDB\"\n              \"function\" \"set\"\n              \"input\" \"selectedTableIndex,inEditRecordInternalKey,encodedRecord\"\n              \"output\" \"setReceipt\"\n              \"hidden\" \"input,output\"\n            })\n          )))\n\n        (react-Contract {\n            \"key\" 34\n            \"name\" \"TypeDB\"\n            \"function\" \"delete\"\n            \"input\" \"selectedTableIndex,inEditRecordInternalKey\"\n            \"output\" \"deleteReceipt\"\n            \"hidden\" \"input,output\"\n          })\n       (react-button {\"key\" 8 \"title\" \"create\"} \"info\")\n\n   ))\n\n    (watch [\"masterTableData\"] (fn* () (let* (\n        masterTableData (get-state \"masterTableData\")\n      sdfs (log \"masterTableDataiiii\" masterTableData)\n        options (map (fn* (table)\n                {\"label\" (get table \"name_parsed\")  \"value\" (get table \"key\")}\n            )\n            masterTableData\n        )\n      dfs (log \"options\" options masterTableData)\n    )\n      (react-div {} (list\n       (react-Select {\n              \"key\" 2\n              \"options\" options\n              \"optionValue\" \"value\"\n              \"onChange\" (fn* (value) (do\n                (set-state \"selectedTableIndex\" value)\n                (log \"00----selectedTableIndex\" value)\n              ))\n          })\n        (watch [\"selectedTableInfo\" \"showFields\"] (fn* () (let* (\n              selectedTableInfo (get-state \"selectedTableInfo\")\n              countItems (if (get-state \"showFields\")\n                (count (get selectedTableInfo \"fields\"))\n                (get selectedTableInfo \"count\")\n              )\n            )\n            (watch [\"pageNumber\"] (fn* () (react-pagination {\n                \"defaultCurrent\" 1\n                \"total\" countItems\n                \"defaultPageSize\" (get-state \"defaultPageSize\")\n                \"showTotal\" (fn* (total) (str total))\n                \"current\" (log (get-state \"pageNumber\") \"pageNumber value\")\n                \"onChange\" (fn* (pageNumber pageSize) (let* (\n                   tableStart (* (- pageNumber 1) pageSize)\n                   dfs (log \"pageNumber onChange\" pageNumber tableStart)\n                )\n                    (do (set-state \"tableStart\" tableStart) (set-state \"pageNumber\" pageNumber))\n                ))\n            })\n          ))\n        )))\n        (react-button {\"title\" \"fields\" \"onClick\" (fn* () (set-state \"showFields\" (if (get-state \"showFields\") false true )  ))})\n        ))\n    )))\n\n))>\n\n\n\n\n",
    "manual": null
}
